function strDecode(e) { for (key = c_ + b_ + a_ + d_, e = Base64.decode(e), len = key.length, code = "", i = 0; i < e.length; i++)k = i % len, code += String.fromCharCode(e.charCodeAt(i) ^ key.charCodeAt(k)); return Base64.decode(code) } function strEncode(e) { for (key = c_ + b_ + a_ + d_, e = Base64.encode(e), len = key.length, code = "", i = 0; i < e.length; i++)k = i % len, code += String.fromCharCode(e.charCodeAt(i) ^ key.charCodeAt(k)); return Base64.encode(code) } var a_ = "ga", b_ = "s", c_ = "top", d_ = "me", Base64 = { _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", encode: function (e) { var r, t, o, c, a, d, n, h = "", i = 0; for (e = Base64._utf8_encode(e); i < e.length;)r = e.charCodeAt(i++), t = e.charCodeAt(i++), o = e.charCodeAt(i++), c = r >> 2, a = (3 & r) << 4 | t >> 4, d = (15 & t) << 2 | o >> 6, n = 63 & o, isNaN(t) ? d = n = 64 : isNaN(o) && (n = 64), h = h + this._keyStr.charAt(c) + this._keyStr.charAt(a) + this._keyStr.charAt(d) + this._keyStr.charAt(n); return h }, decode: function (e) { var r, t, o, c, a, d, n, h = "", i = 0; for (e = e.replace(/[^A-Za-z0-9\+\/\=]/g, ""); i < e.length;)c = this._keyStr.indexOf(e.charAt(i++)), a = this._keyStr.indexOf(e.charAt(i++)), d = this._keyStr.indexOf(e.charAt(i++)), n = this._keyStr.indexOf(e.charAt(i++)), r = c << 2 | a >> 4, t = (15 & a) << 4 | d >> 2, o = (3 & d) << 6 | n, h += String.fromCharCode(r), 64 != d && (h += String.fromCharCode(t)), 64 != n && (h += String.fromCharCode(o)); return h = Base64._utf8_decode(h) }, _utf8_encode: function (e) { e = e.replace(/\r\n/g, "\n"); for (var r = "", t = 0; t < e.length; t++) { var o = e.charCodeAt(t); 128 > o ? r += String.fromCharCode(o) : o > 127 && 2048 > o ? (r += String.fromCharCode(o >> 6 | 192), r += String.fromCharCode(63 & o | 128)) : (r += String.fromCharCode(o >> 12 | 224), r += String.fromCharCode(o >> 6 & 63 | 128), r += String.fromCharCode(63 & o | 128)) } return r }, _utf8_decode: function (e) { for (var r = "", t = 0, o = c1 = c2 = 0; t < e.length;)o = e.charCodeAt(t), 128 > o ? (r += String.fromCharCode(o), t++) : o > 191 && 224 > o ? (c2 = e.charCodeAt(t + 1), r += String.fromCharCode((31 & o) << 6 | 63 & c2), t += 2) : (c2 = e.charCodeAt(t + 1), c3 = e.charCodeAt(t + 2), r += String.fromCharCode((15 & o) << 12 | (63 & c2) << 6 | 63 & c3), t += 3); return r } };